% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sits_tile_api.R
\name{.try}
\alias{.try}
\title{Handling error}
\usage{
.try(
  expr,
  ...,
  .rollback = NULL,
  .default = NULL,
  .msg_error = NULL,
  .finally = NULL
)
}
\arguments{
\item{expr}{Expression to be evaluated.}

\item{...}{Additional parameter to be passed to \code{tryCatch()}.}

\item{.rollback}{Expression to run in case of error.}

\item{.default}{Expression to evaluate and return in case of error
(setting this parameter avoids error raising).}

\item{.msg_error}{An optional customized error message.}

\item{.finally}{An optional expression to run before exit function
(with error or not).}
}
\value{
Last expression evaluated in \code{expr}, if no error occurs.
  If an error occurs, the function returns the last expression
  evaluated in \code{.default} parameter. If \code{.default} parameter
  is not informed, the function will raise the error.
}
\description{
This is a fancy implementation of \code{tryCatch()}. It
has a shorter name and provide a easy functionality of rolling back
(run an expression in case of error, but not avoiding it),
of default value (run expression in case of error bypassing it).
Customized error messages can be passed to \code{msg_error} param.
}
\details{
The order of execution is the following:
\enumerate{
\item try evaluate \code{expr};
\item if everything goes well, run step 6 and return the last expression
  evaluated in \code{expr} (end);
\item if an error occurs in step 1, evaluate \code{.rollback} expression
  (if informed);
\item if \code{.default} is not informed, run step 6 and throws
  the error (end);
\item if \code{.default} is informed, evaluate it, run step 6, and
  return the last expression in \code{.default} (end);
\item evaluate \code{.finally} (if informed).
}
}
\examples{
\dontrun{
.try({
  file <- tempfile("test.txt")
  cat(letters, file = file)
  cat(letters[["a"]], file = file, append = TRUE) # error!
},
.rollback = {
  unlink(file) # delete file before error is thrown
})

value <- .try({
  addr <- url("http://example.com/")
  open(addr)
  readLines(addr)
  "You have access to the internet!" # don't use return()!
},
.default = {
  "You do not have access to the internet!" # bypass any error!
},
.finally = {
  close(addr) # close connection before exit (with error or not)
})
print(value)
}

}
\seealso{
\code{\link[base]{tryCatch()}}

Other utility functions: 
\code{\link{.intersects}()}
}
\concept{utility functions}
\keyword{internal}
