% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sits_torch_optim_madgrad.R
\name{optim_madgrad}
\alias{optim_madgrad}
\title{A Momentumized, Adaptive, Dual Averaged Gradient Method for Stochastic
Optimization.}
\usage{
optim_madgrad()
}
\arguments{
\item{params}{List of parameters to optimize.}

\item{lr}{Learning rate (default: 1e-2).}

\item{momentum}{Momentum value in  the range [0,1) (default: 0.9).}

\item{weight_decay}{Weight decay, i.e. a L2 penalty (default: 0).}

\item{eps}{Term added to the denominator outside of
the root operation to improve numerical stability
(default: 1e-6).}
}
\value{
An optimizer object implementing the `step` and `zero_grad` methods.
}
\description{
A Momentumized, Adaptive, Dual Averaged Gradient Method for Stochastic
Optimization.
}
\note{
Please refer to the sits documentation available in
<https://e-sensing.github.io/sitsbook/> for detailed examples.
}
\author{
Daniel Falbel, \email{dfalbel@gmail.com}

[MADGRAD](https://arxiv.org/abs/2101.11075) is a general purpose optimizer that
can be used in place of SGD or Adam may converge faster and generalize better.
Currently GPU-only. Typically, the same learning rate schedule that is used
for SGD or Adam may be used. The overall learning rate is not comparable to
either method and should be determined by a hyper-parameter sweep.

MADGRAD requires less weight decay than other methods, often as little as
zero. Momentum values used for SGD or Adam's beta1 should work here also.

On sparse problems both weight_decay and momentum should be set to 0.
(not yet supported in the R implementation).

This code has been lifted from the "madgrad" R package developed by
Daniel Falbel, licensed as an MIT licence work.
}
