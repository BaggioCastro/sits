% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sits_classification.R
\name{sits_classify}
\alias{sits_classify}
\title{Classify a set of time series or a data cube using machine learning models}
\usage{
sits_classify(data.tb = NULL, ml_model = NULL, interval = "12 month",
  filter = NULL, multicores = 2, memsize = 4, output_dir = "./")
}
\arguments{
\item{data.tb}{Tibble with time series metadata and data.}

\item{ml_model}{Pre-built machine learning model (see \code{\link[sits]{sits_train}}).}

\item{interval}{Interval used for classification (in months).}

\item{filter}{Smoothing filter to be applied (if desired).}

\item{multicores}{Number of cores to be used for classification.}

\item{memsize}{Memory available for classification (in GB).}

\item{output_dir}{Output directory}
}
\value{
A tibble with the predicted labels for each input segment.
}
\description{
This function classifies a set of time series or data cube given
a set of training samples, an inference model, and an interval.
To perform the classification, users should provide a set of
labelled samples. Each samples should be associated to one spatial location
(latitude/longitude), one time interval and a label.

After defining the training samples, the users need to provide a machine learning model.
Currenly, sits supports the following models:
'svm' (see \code{\link[sits]{sits_svm}}), 'random forest' (see \code{\link[sits]{sits_rfor}}),
'lda' (see \code{\link[sits]{sits_lda}}),
'qda' (see \code{\link[sits]{sits_qda}}), multinomial logit' (see \code{\link[sits]{sits_mlr}}),
'lasso' (see \code{\link[sits]{sits_mlr}}), and 'ridge' (see \code{\link[sits]{sits_mlr}}).

The model should be precomputed by the user. This model should be
passed to the function using the parameter "ml_model".
}
\examples{
\donttest{
# Retrieve the samples for Mato Grosso
# Install the inSitu library
# devtools::install_github("e-sensing/inSitu")
# library(inSitu)

samples <- inSitu::br_mt_1_8K_9classes_6bands

# select the bands "ndvi", "evi"
samples_2bands <- sits_select_bands(samples, ndvi, evi)

#select a random forest model

rfor_model <- sits_train(samples_2bands, ml_method = sits_rfor())

# Retrieve a time series (17 years)
data(point_mt_6bands)

# select the bands "ndvi" and "evi"
point.tb <- sits_select_bands(point_mt_6bands, ndvi, evi)

# classify the point

class.tb <- sits_classify(point.tb, rfor_model)

# plot the classification

sits_plot(class.tb)

# Classify a raster file with 23 instances for one year

# select the bands "ndvi", "evi" from the "inSitu" package
evi_file <- system.file("extdata/Sinop", "Sinop_evi_2014.tif", package = "inSitu")
ndvi_file <- system.file("extdata/Sinop", "Sinop_ndvi_2014.tif", package = "inSitu")

files <- c(ndvi_file, evi_file)

# define the timeline for the files
time_file <- system.file("extdata/Sinop", "timeline_2014.txt", package = "inSitu")
timeline_2013_2014 <- scan(time_file, character())

# create a data cube based on the information about the files
sinop <- sits_cube(name = "Sinop", timeline = timeline_2013_2014,
                   bands = c("ndvi", "evi"), files = files)

# classify the raster image
sinop_probs <- sits_classify(sinop, ml_model = rfor_model, memsize = 4, multicores = 2)

# label the classified image
sinop_label <- sits_label_classification(sinop_probs)

# plot the raster image
sits_plot_raster(sinop_label, time = 1, title = "Sinop-2013-2014")

# smooth the result with a bayesian filter
sinop_bayes <- sits_label_classification(sinop_probs, smoothing = "bayesian")

# plot the smoothened image
sits_plot_raster(sinop_bayes, time = 1, title = "Sinop-smooth")
}
}
\author{
Gilberto Camara, \email{gilberto.camara@inpe.br}
}
