% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sits_deep_learning.R
\name{sits_CNN}
\alias{sits_CNN}
\title{Train a model using the a set of 1D Convolutional Neural Networks}
\usage{
sits_CNN(data = NULL, units = c(32, 32, 32), kernels = c(7, 5, 3),
  activation = "relu", L2_rate = 1e-06, dropout_rates = c(0.5, 0.45,
  0.4), batch_normalization = FALSE,
  optimizer = keras::optimizer_adam(lr = 0.001), epochs = 150,
  batch_size = 128, validation_split = 0.2, verbose = 1,
  binary_classification = FALSE)
}
\arguments{
\item{data}{Time series with the training samples.}

\item{units}{Vector with the number of 1D convolutional filters.}

\item{kernels}{Vector with the size of the 1D convolutional kernels.}

\item{activation}{Activation function for 1D convolution.
Valid values are {'relu', 'elu', 'selu', 'sigmoid'}.}

\item{L2_rate}{Regularization rate for 1D convolution.
Valid values are {'relu', 'elu', 'selu', 'sigmoid'}.}

\item{dropout_rates}{Vector with dropout rates for 1D convolutional filters.}

\item{batch_normalization}{Boolean: use batch normalization instead of dropout? Default: FALSE}

\item{optimizer}{Function with a pointer to the optimizer function (default is optimization_adam()).
Options are optimizer_adadelta(), optimizer_adagrad(), optimizer_adam(),
optimizer_adamax(), optimizer_nadam(), optimizer_rmsprop(), optimizer_sgd()}

\item{epochs}{Number of iterations to train the model.}

\item{batch_size}{Number of samples per gradient update.}

\item{validation_split}{Number between 0 and 1. Fraction of the training data to be used as validation data.
The model will set apart this fraction of the training data, will not train on it,
and will evaluate the loss and any model metrics on this data at the end of each epoch.
The validation data is selected from the last samples in the x and y data provided,
before shuffling.}

\item{verbose}{Verbosity mode (0 = silent, 1 = progress bar, 2 = one line per epoch).}

\item{binary_classification}{A lenght-one logical indicating if this is a binary classification. If it is so,
the number of unique labels in the training data must be two as well.}
}
\value{
A model fitted to input data to be passed to \code{\link[sits]{sits_classify}}
}
\description{
Use a 1DCNN algorithm to classify data. Users can define the number of
convolutional layers], the size of the convolutional
kernels, and the activation functions.
}
\examples{
\donttest{
# Retrieve the set of samples for the Mato Grosso region (provided by EMBRAPA)
# Install the inSitu library
# devtools::install_github("e-sensing/inSitu")
# library(inSitu)

# select the bands for classification
samples <- inSitu::br_mt_1_8K_9classes_6bands

# find a training model based on the distances and default values (SVM model)
samples_4bands <- sits_select_bands(samples, ndvi, evi, nir, mir)

# Build a machine learning model based on deep learning
dl_model <- sits_train (samples_4bands, sits_CNN())

# get a point and classify the point with the ml_model
point.tb <- sits_select_bands(point_mt_6bands, ndvi, evi, nir, mir)
class.tb <- sits_classify(point.tb, dl_model)
sits_plot(class.tb)
}
}
\author{
Gilberto Camara, \email{gilberto.camara@inpe.br}

Alexandre Xavier Ywata de Carvalho, \email{alexandre.ywata@ipea.gov.br}

Rolf Simoes, \email{rolf.simoes@inpe.br}
}
