% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sits_get_data.R
\name{sits_get_data}
\alias{sits_get_data}
\title{Obtain time series from different sources}
\usage{
sits_get_data(cube, file = NULL, ...)
}
\arguments{
\item{cube}{Data cube from where data is to be retrived.}

\item{file}{File with information on the data to be retrieved}

\item{...}{Other parameters to be passed for specific types}
}
\description{
Retrieve a set of time series and puts it in a "sits tibble".
Sits tibbles are the main structures of sits package.
They contain both the satellite image time series and their metadata.
A sits tibble is a tibble with pre-defined columns that
has the metadata and data for each time series. The columns are
<longitude, latitude, start_date, end_date, label, cube, time_series>.
There are many ways of retrieving time series:
\itemize{
\item{WTSS}{Retrieve data from Web Time Series Service (WTSS)
           using a lat/long point (see  \code{\link[sits]{sits_get_data.wtss_cube}}),
           a CSV file (see\code{\link[sits]{sits_get_data.csv_wtss_cube}})
           or a SHP file (see code{\link[sits]{sits_get_data.shp_wtss_cube}})}

\item{SATVEG}{Retrieve data from SATVEG service using a lat/long point
              (see  \code{\link[sits]{sits_get_data.satveg_cube}}),
              a CSV file (see\code{\link[sits]{sits_get_data.csv_satveg_cube}})
              or a SHP file (see code{\link[sits]{sits_get_data.shp_satveg_cube}})}

\item{BRICK}{Retrieve data from a BRICK cube using a lat/long point
             (see  \code{\link[sits]{sits_get_data.brick_cube}}),
             a CSV file (see\code{\link[sits]{sits_get_data.csv_brick_cube}})
             or a SHP file (see code{\link[sits]{sits_get_data.shp_brick_cube}})}

\item{STACK}{Retrieve data from a STACK cube (such as Brazil Data Cube or images in AWS)
            using a lat/long point (see  \code{\link[sits]{sits_get_data.stack_cube}}),
            a CSV file (see\code{\link[sits]{sits_get_data.csv_stack_cube}})
            or a SHP file (see code{\link[sits]{sits_get_data.shp_stack_cube}})}
}

The URL and other parameters for accessing the time series services
are defined in the package configuration file. This file is called "config.yml".
Please see the \code{\link[sits]{sits_config}} for more information.

Before using this service, the user should create a valid description
of a data cube using the \code{\link[sits]{sits_cube}} function.

 The result is a tibble with the metadata and data for each time series
<longitude, latitude, start_date, end_date, label, cube, time_series>
}
\examples{
\donttest{
# Read a single lat long point from a WTSS server

wtss_cube <- sits_cube(type = "WTSS",
                       URL = "http://www.esensing.dpi.inpe.br/wtss/",
                       name = "MOD13Q1")
point.tb <- sits_get_data (wtss_cube, longitude = -55.50563,
                                      latitude = -11.71557)
plot(point.tb)

# Read a set of points defined in a CSV file from a WTSS server
csv_file <- system.file ("extdata/samples/samples_matogrosso.csv",
                          package = "sits")
points.tb <- sits_get_data (wtss_cube, file = csv_file)
# show the points retrieved for the WTSS server
plot(points.tb[1:3,])


# define a shapefile and read from the points inside it from WTSS
shp_file <- system.file("extdata/shapefiles/parcel_agriculture.shp",
                         package = "sits")
parcel.tb <- sits_get_data(wtss_cube, file = shp_file, .n_shp_pol = 5)

# Read a point in a Raster Brick
# define the file that has the raster brick
files  <- c(system.file ("extdata/raster/mod13q1/sinop-crop-ndvi.tif",
                         package = "sits"))
# define the timeline
data(timeline_modis_392)
# create a data cube based on the information about the files
raster_cube <- sits_cube(type = "BRICK", satellite = "TERRA",
                         sensor = "MODIS", name = "Sinop-crop",
                         timeline = timeline_modis_392,
                         bands = c("NDVI"), files = files)

# read the time series of the point from the raster
point_ts <- sits_get_data(raster_cube, longitude = -55.554,
                                       latitude = -11.525)
plot(point_ts)

#' # Read a CSV file in a Raster Brick
csv_file <- system.file ("extdata/samples/samples_sinop_crop.csv",
                         package = "sits")
points.tb <- sits_get_data (raster_cube, file = csv_file)
# show the points retrieved for the RASTER images
plot(points.tb)
}
}
\references{
Lubia Vinhas, Gilberto Queiroz, Karine Ferreira, Gilberto Camara,
Web Services for Big Earth Observation Data.
In: XVII Brazilian Symposium on Geoinformatics, 2016, Campos do Jordao.
Proceedings of GeoInfo 2016. Sao Jose dos Campos: INPE/SBC, 2016. p.166-177.
}
\author{
Gilberto Camara
}
