% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sits_tile_api.R
\name{data_type}
\alias{data_type}
\alias{.as_int}
\alias{.as_chr}
\alias{.as_dbl}
\alias{.as_date}
\alias{.has}
\alias{.has_name}
\alias{.set_class}
\alias{.compact}
\title{Data type functions}
\usage{
.as_int(x)

.as_chr(x)

.as_dbl(x)

.as_date(x)

.has(x)

.has_name(x)

.set_class(x, ...)

.compact(x)
}
\arguments{
\item{x}{Input value.}

\item{...}{Additional parameters.}
}
\value{
See description of each function.
}
\description{
These are a short named version of data type functions.
}
\section{Functions}{
\itemize{
\item \code{.as_int()}: Convert an input to \code{integer}.
Returns \code{integer} or \code{NULL} if value is empty.

\item \code{.as_chr()}: Convert an input to \code{character}.
Returns \code{character} or \code{NULL} if value is empty.

\item \code{.as_dbl()}: Convert an input to \code{numeric}.
Returns \code{numeric} or \code{NULL} if value is empty.

\item \code{.as_date()}: Convert an input to a date type. This is
the same function as \code{lubridate::as_date()}.
Returns \code{date} or \code{NULL} if value is empty.

\item \code{.has()}: Check if an input has a value or not. Any zero length
value of any type is evaluated as \code{FALSE}. This function is broader
than \code{is.null()} that only accounts for \code{NULL} value.
Returns \code{logical}.

\item \code{.has_name()}: Check if an input has names or not. If there is
any element without a name the function evaluates as \code{FALSE}.
Returns \code{logical}.

\item \code{.set_class()}: Set \code{class} of object \code{x}.
Returns updated \code{x} object.

\item \code{.compact()}: Evaluates unique values of \code{x}. If there is
only one unique value, return it. Otherwise return all \code{x}.
Returns same value as \code{x} or the unique value in \code{x} (if
this is the case).

}}
\examples{
\dontrun{
.as_int(1.234)
.as_dbl(42L)
x <- 1.234
.as_int(x) == x # x is not integer
x <- 42.0
.as_int(x) == x # x is an integer
.as_chr(x)
.as_date(list("2020-01-01", "2022-12-01"))
.has(list()) # FALSE
.has(NULL) # FALSE
.has(c()) # FALSE
.has(FALSE) # TRUE
.set_class(list(), "new_class")
.compact(c(1, 2, 3)) # 1 2 3
.compact(c(1, 1, 1)) # 1
}

}
\seealso{
Other data types: 
\code{\link{period_api}}
}
\concept{data types}
\keyword{internal}
